In a web browser, JavaScript can store memory in several different ways, primarily through the use of various APIs and storage mechanisms. Here are the main methods:

1. Variables in Memory (Heap):
   - When JavaScript code is executed, objects and primitive values are stored in the browser's memory (the heap). These values exist only for the duration of the page sessions and will be cleared once the page is unloaded or refreshed.

2. Local Storage:
   - Using the `localStorage` API, JavaScript can store key-value pairs in the user's browser with no expiration time. Data stored in `localStorage` persists even after the browser is closed and reopened.

   -----------------------------------------------
   localStorage.setItem('key', 'value');
   const value = localStorage.getItem('key');
   -----------------------------------------------

3. Session Storage:
   - Similar to `localStorage`, `sessionStorage` allows you to store data in the browser, but it is specific to a single browser tab or window. The data persists as long as the tab is open, but it is deleted when the tab or window is closed.

   -----------------------------------------------
   sessionStorage.setItem('key', 'value');
   const value = sessionStorage.getItem('key');
   -----------------------------------------------

4. Cookies:
   - JavaScript can also manipulate cookies, which are small pieces of data that are stored in the user's browser. Cookies can have an expiration date and are sent to the server with every HTTP request, making them useful for session management.

   -----------------------------------------------
   document.cookie = "key=value; expires=Fri, 31 Dec 2023 23:59:59 GMT";
   -----------------------------------------------

5. IndexedDB:
   - For larger amounts of structured data, JavaScript can use IndexedDB, a more complex storage mechanism that allows for storing and managing significant amounts of data in an indexed format. It supports transactions and is asynchronous.

   -----------------------------------------------
   const request = indexedDB.open('myDatabase', 1);
   -----------------------------------------------

6. File System Access API:
   - For web applications that require more advanced file read/write capabilities, the File System Access API allows users to interact with files on their local file systems. This is subject to user permissions and is not available in all browsers yet.

Each of these methods has its own use cases, advantages, and limitations depending on the nature and persistence requirements of the data being stored.